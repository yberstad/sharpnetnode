{"version":3,"sources":["server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAcA,IAAI,SAAS,SAAT,MAAS,CAAC,EAAD,EAAQ;;AAEjB,QAAI,WAAW,+BAAsB;AACjC,cAAM,MAAN;AACA,gBAAQ;mBAAO;AACX,qBAAK,EAAE,4BAAF,EAAL;AACA,uBAAO,EAAE,4BAAF,EAAP;AACA,qBAAK,EAAE,4BAAF,EAAL;;SAHI;KAFG,CAAX,CAFa;;AAWjB,QAAI,SAAS,2BAAkB;AAC3B,eAAO,+BAAsB;AACzB,kBAAM,OAAN;AACA,oBAAQ;uBAAO;AACX,2BAAO;AACH,8BAAM,yBAAgB,QAAhB,CAAN;AACA,iCAAS,mBAAM;AACX,gCAAM,OAAO,yBAAP,CADK;AAEX,iCAAK,YAAL,CAAkB,aAAlB,EAFW;AAGX,mCAAO,GAAG,UAAH,CAAc,OAAd,EAAuB,IAAvB,CAA4B,EAA5B,EAAgC,OAAhC,EAAP,CAHW;yBAAN;qBAFb;;aADI;SAFL,CAAP;KADS,CAAT,CAXa;;AA2BjB,aAAS,MAAT,GAAiB;AACb,qBADa;;AAEb,gBAAQ,GAAR,CAAY,OAAZ,EAFa;KAAjB;;AAKA,WAAO,MAAP,CAhCiB;CAAR;;AAmCb,IAAI,MAAM,wBAAN;AACJ,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;;AAEA,IAAI,cAAJ;AACA,qBAAY,OAAZ,CAAoB,8DAApB,EAAoF,UAAC,GAAD,EAAM,QAAN,EAAmB;AACrG,QAAI,GAAJ,EAAS,MAAM,GAAN,CAAT;;AAEA,SAAK,QAAL,CAHqG;AAIrG,QAAI,GAAJ,CAAQ,UAAR,EAAoB,8BAAY;AAC9B,gBAAQ,OAAO,EAAP,CAAR;AACA,kBAAU,IAAV;KAFkB,CAApB,EAJqG;AAQrG,QAAI,MAAJ,CAAW,IAAX,EAAiB;eACjB,QAAQ,GAAR,CAAY,2BAAZ;KADiB,CAAjB,CARqG;CAAnB,CAApF;;AAYC,IAAG,IAAH,EAAQ;AACH,YAAQ,GAAR,CAAY,OAAZ,EADG;AAEJ,QAAM,OAAO,yBAAP,CAFF;AAGJ,SAAK,YAAL,CAAkB,aAAlB,EAHI;CAAR","file":"server-compiled.js","sourcesContent":["import express from 'express';\n//import schema from './data/schema';\nimport TestClass from './data/testdebug'\nimport GraphQLHTTP from 'express-graphql';\n\nimport {MongoClient} from 'mongodb';\nimport {\n    GraphQLSchema,\n    GraphQLObjectType,\n    GraphQLList,\n    GraphQLInt,\n    GraphQLString\n} from 'graphql';\n\nlet Schema = (db) => {\n\n    let linkType = new GraphQLObjectType({\n        name: 'Link',\n        fields: () => ({\n            _id: { type: GraphQLString },\n            title: { type: GraphQLString },\n            url: { type: GraphQLString }\n        })\n    });\n\n    let schema = new GraphQLSchema({\n        query: new GraphQLObjectType({\n            name: 'Query',\n            fields: () => ({\n                links: {\n                    type: new GraphQLList(linkType),\n                    resolve: () => {\n                        const inst = new TestClass();\n                        inst.logFuncition('messagetext');\n                        return db.collection(\"links\").find({}).toArray();\n                    }\n                }\n            })\n        })\n    });\n\n    function logger(){\n        \"use strict\";\n        console.log('joggu');\n    }\n\n    return schema\n};\n\nlet app = express();\napp.use(express.static('public'));\n\nlet db;\nMongoClient.connect('mongodb://ohabbers:dykk12@ds042898.mongolab.com:42898/dbgira', (err, database) => {\n  if (err) throw err;\n\n  db = database;\n  app.use('/graphql', GraphQLHTTP({\n    schema: Schema(db),\n    graphiql: true\n  }));\n  app.listen(3000, () => \n  console.log('Listening on port 3000   '));\n});\n\n if(true){\n      console.log('jaggu');\n     const inst = new TestClass();\n     inst.logFuncition('messagetext');\n  }\n"]}